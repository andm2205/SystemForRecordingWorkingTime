// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SystemForRecordingWorkingTime;

#nullable disable

namespace SystemForRecordingWorkingTime.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.DayOffAtTheExpenseOfWorkingOutRequest+WorkingOutDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DayOffAtTheExpenseOfWorkingOutRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Value")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("DayOffAtTheExpenseOfWorkingOutRequestId");

                    b.ToTable("WorkingOutDates");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.RemoteWorkRequest+WorkPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RemoteWorkRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RemoteWorkRequestId");

                    b.ToTable("WorkPlans");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApplicantUserId")
                        .HasColumnType("int");

                    b.Property<int>("ApprovingUserId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantUserId");

                    b.HasIndex("ApprovingUserId");

                    b.ToTable("Request");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Request");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.Request+StatedDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Value")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("StatedDates");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.DayOffAtTheExpenseOfVacationRequest", b =>
                {
                    b.HasBaseType("SystemForRecordingWorkingTime.Models.Request");

                    b.Property<int>("ReplacementUserId")
                        .HasColumnType("int")
                        .HasColumnName("DayOffAtTheExpenseOfVacationRequest_ReplacementUserId");

                    b.HasIndex("ReplacementUserId");

                    b.HasDiscriminator().HasValue("DayOffAtTheExpenseOfVacationRequest");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.DayOffAtTheExpenseOfWorkingOutRequest", b =>
                {
                    b.HasBaseType("SystemForRecordingWorkingTime.Models.Request");

                    b.Property<int>("ReplacementUserId")
                        .HasColumnType("int")
                        .HasColumnName("DayOffAtTheExpenseOfWorkingOutRequest_ReplacementUserId");

                    b.HasIndex("ReplacementUserId");

                    b.HasDiscriminator().HasValue("DayOffAtTheExpenseOfWorkingOutRequest");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.DayOffRequest", b =>
                {
                    b.HasBaseType("SystemForRecordingWorkingTime.Models.Request");

                    b.Property<int>("ReplacementUserId")
                        .HasColumnType("int");

                    b.HasIndex("ReplacementUserId");

                    b.HasDiscriminator().HasValue("DayOffRequest");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.RemoteWorkRequest", b =>
                {
                    b.HasBaseType("SystemForRecordingWorkingTime.Models.Request");

                    b.HasDiscriminator().HasValue("RemoteWorkRequest");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.VacationRequest", b =>
                {
                    b.HasBaseType("SystemForRecordingWorkingTime.Models.Request");

                    b.Property<bool>("Movable")
                        .HasColumnType("bit");

                    b.Property<int>("ReplacementUserId")
                        .HasColumnType("int")
                        .HasColumnName("VacationRequest_ReplacementUserId");

                    b.Property<int>("VacationType")
                        .HasColumnType("int");

                    b.HasIndex("ReplacementUserId");

                    b.HasDiscriminator().HasValue("VacationRequest");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.DayOffAtTheExpenseOfWorkingOutRequest+WorkingOutDate", b =>
                {
                    b.HasOne("SystemForRecordingWorkingTime.Models.DayOffAtTheExpenseOfWorkingOutRequest", "DayOffAtTheExpenseOfWorkingOutRequest")
                        .WithMany("WorkingOutDates")
                        .HasForeignKey("DayOffAtTheExpenseOfWorkingOutRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayOffAtTheExpenseOfWorkingOutRequest");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.RemoteWorkRequest+WorkPlan", b =>
                {
                    b.HasOne("SystemForRecordingWorkingTime.Models.RemoteWorkRequest", "RemoteWorkRequest")
                        .WithMany("WorkPlans")
                        .HasForeignKey("RemoteWorkRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RemoteWorkRequest");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.Request", b =>
                {
                    b.HasOne("SystemForRecordingWorkingTime.Models.User", "ApplicantUser")
                        .WithMany("ApplicantRequests")
                        .HasForeignKey("ApplicantUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemForRecordingWorkingTime.Models.User", "ApprovingUser")
                        .WithMany("ApprovingRequests")
                        .HasForeignKey("ApprovingUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicantUser");

                    b.Navigation("ApprovingUser");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.Request+StatedDate", b =>
                {
                    b.HasOne("SystemForRecordingWorkingTime.Models.Request", "Request")
                        .WithMany("StatedDates")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.DayOffAtTheExpenseOfVacationRequest", b =>
                {
                    b.HasOne("SystemForRecordingWorkingTime.Models.User", "ReplacementUser")
                        .WithMany()
                        .HasForeignKey("ReplacementUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReplacementUser");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.DayOffAtTheExpenseOfWorkingOutRequest", b =>
                {
                    b.HasOne("SystemForRecordingWorkingTime.Models.User", "ReplacementUser")
                        .WithMany()
                        .HasForeignKey("ReplacementUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReplacementUser");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.DayOffRequest", b =>
                {
                    b.HasOne("SystemForRecordingWorkingTime.Models.User", "ReplacementUser")
                        .WithMany()
                        .HasForeignKey("ReplacementUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReplacementUser");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.VacationRequest", b =>
                {
                    b.HasOne("SystemForRecordingWorkingTime.Models.User", "ReplacementUser")
                        .WithMany()
                        .HasForeignKey("ReplacementUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReplacementUser");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.Request", b =>
                {
                    b.Navigation("StatedDates");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.User", b =>
                {
                    b.Navigation("ApplicantRequests");

                    b.Navigation("ApprovingRequests");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.DayOffAtTheExpenseOfWorkingOutRequest", b =>
                {
                    b.Navigation("WorkingOutDates");
                });

            modelBuilder.Entity("SystemForRecordingWorkingTime.Models.RemoteWorkRequest", b =>
                {
                    b.Navigation("WorkPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
